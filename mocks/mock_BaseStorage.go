// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/erupshis/effective_mobile/internal/server/storage (interfaces: BaseStorage)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	datastructs "github.com/erupshis/effective_mobile/internal/datastructs"
	gomock "github.com/golang/mock/gomock"
)

// MockBaseStorage is a mock of BaseStorage interface.
type MockBaseStorage struct {
	ctrl     *gomock.Controller
	recorder *MockBaseStorageMockRecorder
}

// MockBaseStorageMockRecorder is the mock recorder for MockBaseStorage.
type MockBaseStorageMockRecorder struct {
	mock *MockBaseStorage
}

// NewMockBaseStorage creates a new mock instance.
func NewMockBaseStorage(ctrl *gomock.Controller) *MockBaseStorage {
	mock := &MockBaseStorage{ctrl: ctrl}
	mock.recorder = &MockBaseStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBaseStorage) EXPECT() *MockBaseStorageMockRecorder {
	return m.recorder
}

// AddPerson mocks base method.
func (m *MockBaseStorage) AddPerson(arg0 context.Context, arg1 *datastructs.PersonData) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPerson", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPerson indicates an expected call of AddPerson.
func (mr *MockBaseStorageMockRecorder) AddPerson(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPerson", reflect.TypeOf((*MockBaseStorage)(nil).AddPerson), arg0, arg1)
}

// DeletePersonById mocks base method.
func (m *MockBaseStorage) DeletePersonById(arg0 context.Context, arg1 int64) (*datastructs.PersonData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePersonById", arg0, arg1)
	ret0, _ := ret[0].(*datastructs.PersonData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePersonById indicates an expected call of DeletePersonById.
func (mr *MockBaseStorageMockRecorder) DeletePersonById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePersonById", reflect.TypeOf((*MockBaseStorage)(nil).DeletePersonById), arg0, arg1)
}

// SelectPersons mocks base method.
func (m *MockBaseStorage) SelectPersons(arg0 context.Context, arg1 map[string]interface{}) ([]datastructs.PersonData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectPersons", arg0, arg1)
	ret0, _ := ret[0].([]datastructs.PersonData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectPersons indicates an expected call of SelectPersons.
func (mr *MockBaseStorageMockRecorder) SelectPersons(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectPersons", reflect.TypeOf((*MockBaseStorage)(nil).SelectPersons), arg0, arg1)
}

// UpdatePersonById mocks base method.
func (m *MockBaseStorage) UpdatePersonById(arg0 context.Context, arg1 int64, arg2 map[string]interface{}) (*datastructs.PersonData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePersonById", arg0, arg1, arg2)
	ret0, _ := ret[0].(*datastructs.PersonData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePersonById indicates an expected call of UpdatePersonById.
func (mr *MockBaseStorageMockRecorder) UpdatePersonById(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePersonById", reflect.TypeOf((*MockBaseStorage)(nil).UpdatePersonById), arg0, arg1, arg2)
}
