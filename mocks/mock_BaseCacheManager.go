// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/erupshis/effective_mobile/internal/server/storage/cache/manager (interfaces: BaseCacheManager)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBaseCacheManager is a mock of BaseCacheManager interface.
type MockBaseCacheManager struct {
	ctrl     *gomock.Controller
	recorder *MockBaseCacheManagerMockRecorder
}

// MockBaseCacheManagerMockRecorder is the mock recorder for MockBaseCacheManager.
type MockBaseCacheManagerMockRecorder struct {
	mock *MockBaseCacheManager
}

// NewMockBaseCacheManager creates a new mock instance.
func NewMockBaseCacheManager(ctrl *gomock.Controller) *MockBaseCacheManager {
	mock := &MockBaseCacheManager{ctrl: ctrl}
	mock.recorder = &MockBaseCacheManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBaseCacheManager) EXPECT() *MockBaseCacheManagerMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockBaseCacheManager) Add(arg0 context.Context, arg1 map[string]interface{}, arg2 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockBaseCacheManagerMockRecorder) Add(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockBaseCacheManager)(nil).Add), arg0, arg1, arg2)
}

// Close mocks base method.
func (m *MockBaseCacheManager) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockBaseCacheManagerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockBaseCacheManager)(nil).Close))
}

// Flush mocks base method.
func (m *MockBaseCacheManager) Flush(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush.
func (mr *MockBaseCacheManagerMockRecorder) Flush(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockBaseCacheManager)(nil).Flush), arg0)
}

// Get mocks base method.
func (m *MockBaseCacheManager) Get(arg0 context.Context, arg1 map[string]interface{}) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockBaseCacheManagerMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBaseCacheManager)(nil).Get), arg0, arg1)
}

// Has mocks base method.
func (m *MockBaseCacheManager) Has(arg0 context.Context, arg1 map[string]interface{}) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Has indicates an expected call of Has.
func (mr *MockBaseCacheManagerMockRecorder) Has(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockBaseCacheManager)(nil).Has), arg0, arg1)
}
