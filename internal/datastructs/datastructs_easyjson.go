// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package datastructs

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson1cf0b278DecodeGithubComErupshisEffectiveMobileInternalDatastructs(in *jlexer.Lexer, out *PersonData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "surname":
			out.Surname = string(in.String())
		case "patronymic":
			out.Patronymic = string(in.String())
		case "age":
			out.Age = string(in.String())
		case "sex":
			out.Sex = string(in.String())
		case "nationality":
			out.Nationality = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1cf0b278EncodeGithubComErupshisEffectiveMobileInternalDatastructs(out *jwriter.Writer, in PersonData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"surname\":"
		out.RawString(prefix)
		out.String(string(in.Surname))
	}
	if in.Patronymic != "" {
		const prefix string = ",\"patronymic\":"
		out.RawString(prefix)
		out.String(string(in.Patronymic))
	}
	if in.Age != "" {
		const prefix string = ",\"age\":"
		out.RawString(prefix)
		out.String(string(in.Age))
	}
	if in.Sex != "" {
		const prefix string = ",\"sex\":"
		out.RawString(prefix)
		out.String(string(in.Sex))
	}
	if in.Nationality != "" {
		const prefix string = ",\"nationality\":"
		out.RawString(prefix)
		out.String(string(in.Nationality))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PersonData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1cf0b278EncodeGithubComErupshisEffectiveMobileInternalDatastructs(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PersonData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1cf0b278EncodeGithubComErupshisEffectiveMobileInternalDatastructs(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PersonData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1cf0b278DecodeGithubComErupshisEffectiveMobileInternalDatastructs(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PersonData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1cf0b278DecodeGithubComErupshisEffectiveMobileInternalDatastructs(l, v)
}
func easyjson1cf0b278DecodeGithubComErupshisEffectiveMobileInternalDatastructs1(in *jlexer.Lexer, out *ErrorMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "error":
			out.Error = string(in.String())
		case "original":
			out.OriginalMessage = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1cf0b278EncodeGithubComErupshisEffectiveMobileInternalDatastructs1(out *jwriter.Writer, in ErrorMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"error\":"
		out.RawString(prefix[1:])
		out.String(string(in.Error))
	}
	{
		const prefix string = ",\"original\":"
		out.RawString(prefix)
		out.String(string(in.OriginalMessage))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ErrorMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1cf0b278EncodeGithubComErupshisEffectiveMobileInternalDatastructs1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ErrorMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1cf0b278EncodeGithubComErupshisEffectiveMobileInternalDatastructs1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ErrorMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1cf0b278DecodeGithubComErupshisEffectiveMobileInternalDatastructs1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ErrorMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1cf0b278DecodeGithubComErupshisEffectiveMobileInternalDatastructs1(l, v)
}
